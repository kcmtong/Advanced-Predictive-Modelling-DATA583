library(np)
n <- names(df)
f <- as.formula(paste("df$Life.expectancy ~", paste(n[!n %in% "Life.expectancy"], collapse = " + ")))
model_np <- npregbw(Life.expectancy ~ Adult.Mortality + infant.deaths + Hepatitis.B + BMI + under.five.deaths + Polio + Diphtheria + HIV.AIDS + GDP + thinness..1.19.years + Income.composition.of.resources + Schooling, data = df, regtype="ll", bwmethod = "cv.aic")
knitr::opts_chunk$set(echo = TRUE)
### Start of EDA section - retained in Rmd
le <- read.csv("dataset/LifeExpectancy.csv")
# Create a new column Status.val to represent the Status column with number
le$Status.val <- ifelse(le$Status == "Developed",1,0)
# Create a new column as the scaled version of the GDP & Population,
#le$GDP_scaled = scale(le$GDP)
#le$Population_scaled = scale(le$Population)
# Remove the unreliable column
le <- subset(le,select=-c(percentage.expenditure))
# Null Data Handling
library(magrittr)
library(dplyr)
library(tidyr)
le %>% group_by(Country) %>% summarise(COUNT = n())
# Null Data Analysis
library(magrittr)
library(dplyr)
library(tidyr)
missing.values <- le %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==T) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
library(ggplot2)
library(gridExtra)
missing.values <- le %>%
gather(key="key", value="val") %>%
mutate(isna=is.na(val)) %>%
group_by(key) %>%
mutate(total=n()) %>%
group_by(key,total,isna) %>%
summarise(num.isna=n()) %>%
mutate(pct=num.isna/total * 100)
levels <- (missing.values%>%filter(isna==T) %>% arrange(desc(pct)))$key
null_percentage.plot <- missing.values %>% ggplot() +
geom_bar(aes(x = reorder(key, desc(pct)),
y = pct, fill=isna), stat='identity', alpha=0.8) +
scale_x_discrete(limits = levels) +
scale_fill_manual(name = "",
values = c('dodgerblue2', 'coral'),
labels = c("Present", "Missing")) +
coord_flip() + labs(title = "Percentage of missing values",
x = 'Features', y = "% of missing values")
null_inrow.plot <- le %>%
mutate(id = row_number()) %>%
gather(-id, key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
ggplot(aes(key, id, fill = isna)) +
geom_raster(alpha=0.8) +
scale_fill_manual(name = "",
values = c('dodgerblue2', 'coral'),
labels = c("Present", "Missing")) +
scale_x_discrete(limits = levels) +
labs(x = "Features", y = "Row Number", title = "Missing values in rows") +
coord_flip()
library(dplyr)
#le_dropped <- le %>% filter_at(vars(Population_scaled,Population,GDP,GDP_scaled,Income.composition.of.resources,Schooling),any_vars(!is.na(.)))
le_dropped <- le %>% filter_at(vars(Population,GDP,Income.composition.of.resources,Schooling),any_vars(!is.na(.)))
missing.values <- le_dropped %>%
gather(key="key", value="val") %>%
mutate(isna=is.na(val)) %>%
group_by(key) %>%
mutate(total=n()) %>%
group_by(key,total,isna) %>%
summarise(num.isna=n()) %>%
mutate(pct=num.isna/total * 100)
#missing.values
levels <- (missing.values%>%filter(isna==T) %>% arrange(desc(pct)))$key
null_percentage_dropped.plot <- missing.values %>% ggplot() +
geom_bar(aes(x = reorder(key, desc(pct)),
y = pct, fill=isna), stat='identity', alpha=0.8) +
scale_x_discrete(limits = levels) +
scale_fill_manual(name = "",
values = c('dodgerblue2', 'coral'),
labels = c("Present", "Missing")) +
coord_flip() + labs(title = "Percentage of missing values after dropping some common null value records",
x = 'Features', y = "% of missing values")
null_inrow_dropped.plot <- le_dropped %>%
mutate(id = row_number()) %>%
gather(-id, key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
ggplot(aes(key, id, fill = isna)) +
geom_raster(alpha=0.8) +
scale_fill_manual(name = "",
values = c('dodgerblue2', 'coral'),
labels = c("Present", "Missing")) +
scale_x_discrete(limits = levels) +
labs(x = "Features", y = "Row Number", title = "Missing values in rows after dropping some common null value records") +
coord_flip()
#options(repr.plot.width = 30, repr.plot.height = 30)
#gridExtra::grid.arrange(null_percentage.plot, null_inrow.plot, ncol = 1)
#gridExtra::grid.arrange(null_percentage_dropped.plot, null_inrow_dropped.plot, ncol = 1)
le %>% group_by(Country) %>% summarise(COUNT = n())
le_dropped %>% group_by(Country) %>% summarise(COUNT = n()) #12 country were removed after dropping some common null value (193-181)
#might need to consider not using this variable
for(i in 1:ncol(le_dropped)) {                                   # Replace NA in all columns
le_dropped[ , i][is.na(le_dropped[ , i])] <- mean(le_dropped[ , i], na.rm = TRUE)
}
#df = subset(le_dropped, select = -c(Country,GDP,Population) )
df = subset(le_dropped, select = -c(Country) )
#head(df)
#install.packages(GGally)
library(GGally)
ggcorr(df,palette = "RdBu", size=2,label=TRUE,label_size = 2,hjust = .95,layout.exp=2)
#### Full model summary and diagnostics
lmmod <- lm(Life.expectancy~., data = df)
summary(lmmod)
model.step.bic <- step(lmmod,k=log(nrow(df)))
summary(model.step.bic)
df1<-df[,c('Life.expectancy','Adult.Mortality','infant.deaths','under.five.deaths',
'Hepatitis.B','BMI','Polio','Diphtheria',
'HIV.AIDS','thinness..1.19.years','Income.composition.of.resources','Schooling','GDP')]
# df1$Status <- factor(df1$Status)
# removed 'under.five.deaths', due to vif - multi collinearity from BIC selection but it decreased model
#  performance so should we retain it?
#head(df1)
library(car)
lmmod2 <- lm(Life.expectancy~.,data=df1)
summary(lmmod2)
vif(lmmod2)
### End of EDA
### Start of model building and assessments
par(mfrow=c(1,2),heights=c(1,1,1,1))
plot(lmmod2)
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram',breaks = 35)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Shapiro-Wilk Test
shapiro.test(df$Life.expectancy)
#Finding: Since df$Life.expectancy p-value is less than .05, indicate that our y variable is not normally distributed!!!
library(lmtest)
resettest(lmmod2)
# result_npcms
# objects()
# find("result_npcms")
#
# saveRDS(result_npcms,"result_npcms.rds")
result_npcms <- readRDS("result_npcms.rds") #PreTrained Model
summary(result_npcms)
library(glmnet)
# approximately 70:30 split for train and test
df1<-df[,c('Life.expectancy','Adult.Mortality','infant.deaths','under.five.deaths',
'Hepatitis.B','BMI','Polio','Diphtheria',
'HIV.AIDS','thinness..1.19.years','Income.composition.of.resources','Schooling','GDP')]
ind <- sample(1:nrow(df1), 2000)
traino <- df1[ind,]
testo <- df1[-ind,]
#linear model for comparison
lmmodtr <- lm(traino[,1]~.,data=traino[,-1],x=TRUE, y=TRUE)
summary(lmmodtr)
#LASSO
library(glmnet)
y <- traino$Life.expectancy
x <- data.matrix(traino[,-1])
#k-fold cross-validation to find optimal lambda value\
#cv default is 10 fold
cv_model <- cv.glmnet(x, y, alpha = 1)
#optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
plot(cv_model)
#coefficients of best model
lasmod <- glmnet(as.matrix(traino[,-1]),traino$Life.expectancy, alpha = 1, lambda = best_lambda)
coef(lasmod)
#linear model
mselm_te1 <- mean((testo[,1]-predict(lmmodtr, newdata=testo))^2)
#lasso
mselas_te1 <- mean((testo[,1]-predict(lasmod, newx=as.matrix(testo[,-1])))^2)
library(nnet)
#18 MSE
hidden <- 0
nnmse <- 0
for(i in 1:62){
set.seed(4521)
train_lin <- nnet(traino[,1]~., data=traino, size=i, linout=TRUE, trace=FALSE)
#calculating mse
mse_nnet_lin <- mean((testo[,1]-(predict(train_lin, newdata=testo)))^2)
hidden[i] <- i
nnmse[i] <- mse_nnet_lin
#print(paste("Number of hidden layer variables:", i))
#print(paste("MSE:",mse_nnet_lin))
}
#Lasso R2
r2_lasso <- lasmod$dev.ratio
r2_lasso
library(nnet)
#18 MSE
hidden <- 0
nnmse <- 0
for(i in 1:62){
set.seed(4521)
train_lin <- nnet(traino[,1]~., data=traino, size=i, linout=TRUE, trace=FALSE)
#calculating mse
mse_nnet_lin <- mean((testo[,1]-(predict(train_lin, newdata=testo)))^2)
hidden[i] <- i
nnmse[i] <- mse_nnet_lin
#print(paste("Number of hidden layer variables:", i))
#print(paste("MSE:",mse_nnet_lin))
}
print(mselm_te1)
print(mselas_te1)
print(min(mse_nnet_lin))
#MSE comparison
#find best NN hidden model
minval_mse <- min(mse_nnet_lin)
for(i in 1:62){
if (mse_nnet_lin[i] == minval_mse){
best_hiddenNN <- mse_nnet_lin[i]
}
}
if(mse_nnet_lin[i] == minval_mse){ best_hiddenNN <- mse_nnet_lin[i] }
#find best NN hidden model
minval_mse <- min(mse_nnet_lin)
for(i in 1:62){
if(mse_nnet_lin[i] == minval_mse){ best_hiddenNN <- mse_nnet_lin[i] }
}
#find best NN hidden model
minval_mse <- min(mse_nnet_lin)
for(i in 1:62){
if(mse_nnet_lin[i] = minval_mse){ best_hiddenNN <- mse_nnet_lin[i] }
minval_mse
mse_nnet_lin[1]
minval_mse
for(i in 1:62){
if(mse_nnet_lin[i] == minval_mse){ best_hiddenNN <- mse_nnet_lin[i] }
}
minval_mse
for(i in 1:62){
if(mse_nnet_lin[i] == minval_mse){ best_hiddenNN <- mse_nnet_lin[i] }
}
minval_mse
mse_nnet_lin[1]
mse_nnet_lin[2]
mse_nnet_lin[3]
nnmse[3]
nnmse[1]
#Lasso R2
r2_lasso <- lasmod$dev.ratio
paste("Lasso R2: ",r2_lasso)
#NN R2
#Linear Model R2
r2_lm<- lmmodtr$dev.ratio
paste("Linear Model R2: ",r2_lm)
#Lasso R2
r2_lasso <- lasmod$dev.ratio
paste("Lasso R2: ",r2_lasso)
#Linear Model R2
r2_lm<- lmmodtr$r
paste("Linear Model R2: ",r2_lm)
#Lasso R2
r2_lasso <- lasmod$dev.ratio
paste("Lasso R2: ",r2_lasso)
#Linear Model R2
r2_lm<- lmmodtr$r.squared
#Linear Model R2
r2_lm<- lmmodtr$r.squared
paste("Linear Model R2: ",r2_lm)
#Lasso R2
r2_lasso <- lasmod$dev.ratio
paste("Lasso R2: ",r2_lasso)
#Linear Model R2
r2_lm<- summary(lmmodtr)$r.squared
paste("Linear Model R2: ",r2_lm)
#Lasso R2
r2_lasso <- lasmod$dev.ratio
paste("Lasso R2: ",r2_lasso)
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram',breaks = 35,ylim=c(0,40))
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram',breaks = 35,ylim=c(0,20))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram',breaks = 35,ylim=c(0,10))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram',breaks = 35,ylim=c(0,400))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram',breaks = 35,ylim=c(0,500))
#Histogram & QQPlot
par(mfrow=c(1,2))
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram', breaks = 35, ylim=c(0,500))
text(h$mids,h$counts,labels=h$counts, adj=c(0.5, -0.5))
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram', breaks = 35, ylim=c(0,500))
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram', breaks = 35,ylim=c(0,500))
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram', breaks = 35,ylim=c(0,400))
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy_Histogram', breaks = 35,ylim=c(0,500))
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35, asp = 5)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35, asp = 500)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35, asp = 1)
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35, asp = -1)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35, asp = -20)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35, w=5
)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35, w=50
)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
hist_bin_width = 4
hist(df$Life.expectancy,bins=range(-100, 200,hist_bin_width), col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
dev.new(width=10, height=5, unit="in")
#Histogram & QQPlot
par(mfrow=c(1,2))
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
dev.new(width=10, height=5, unit="in")
#Histogram & QQPlot
par(mfrow=c(1,2))
# hist_bin_width = 4
hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
dev.new(width=10, height=5, unit="in")
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
#qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
qqnorm(df$Life.expectancy, main='Life.expectancy_QQplot')
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
plot(lmmod2$QQ)
plot(lmmod2)
plot(lmmod2$2)
plot(lmmod2[2])
plot(lmmod2,which = 2)
#Histogram & QQPlot
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
plot(lmmod2,which = 2)
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
#Histogram & QQPlot
par(mfrow=c(1,2))
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
plot(lmmod2,which = 2)
#S #most of the data is not fall along a straight diagonal line
#qqline(df$Life.expectancy)
#Both are indicating that our predict variable Y "df$Life.expectancy" is not normally distributed
plot(model_np)
library(np)
# n <- names(df)
# f <- as.formula(paste("df$Life.expectancy ~", paste(n[!n %in% "Life.expectancy"], collapse = " + ")))
#
# model_np <- npregbw(Life.expectancy ~ Adult.Mortality + infant.deaths + Hepatitis.B + BMI + under.five.deaths + Polio + Diphtheria + HIV.AIDS + GDP + thinness..1.19.years + Income.composition.of.resources + Schooling, data = df, regtype="ll", bwmethod = "cv.aic")    #19 HRs to run...
# model_np <- npreg(bws = model_np)
# summary(model_np)
model_np <- readRDS("model_np.rds") #PreTrained Model
summary(model_np)
plot(model_np)
plot(model_np$residuals)
model_np$residuals
model_np
#Histogram & QQPlot
par(mfrow=c(1,2))
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
plot(lmmod2$len,which = 2)
#not really a good "bell-shape"
plot(lmmod2$len,which = 2)
#not really a good "bell-shape"
plot(lmmod2,which = 2)
#Histogram & QQPlot
par(mfrow=c(1,2))
# hist_bin_width = 4
h <- hist(df$Life.expectancy, col='steelblue', main='Life.expectancy Histogram', breaks = 35)
#not really a good "bell-shape"
library(ggpubr)
#not really a good "bell-shape"
install.packages("ggpubr")
ggqqplot(lmmod2,which = 2)
library(ggpubr)
